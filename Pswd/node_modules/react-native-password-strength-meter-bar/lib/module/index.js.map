{"version":3,"sources":["index.tsx"],"names":["React","useEffect","useState","View","Text","ProgressBar","zxcvbn","PasswordStrengthMeterBar","password","radius","height","showStrenghtText","unfilledColor","result","setResult","testedResult","setTestedResult","color","setColor","label","setLabel","firstMount","setFirstMount","calculaterPercentage","value","calculateBarColor","calculateLabel","score","marginTop"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,cAA3B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAUA,MAAMC,wBAAyC,GAAG,CAAC;AACjDC,EAAAA,QADiD;AAEjDC,EAAAA,MAAM,GAAG,CAFwC;AAGjDC,EAAAA,MAAM,GAAG,CAHwC;AAIjDC,EAAAA,gBAAgB,GAAG,IAJ8B;AAKjDC,EAAAA,aAAa,GAAG;AALiC,CAAD,KAM5C;AACJ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAS,CAAT,CAApC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAS,CAAT,CAAhD;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAS,SAAT,CAAlC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAS,CAAT,CAA5C;;AAEA,QAAMqB,oBAAoB,GAAIC,KAAD,IAAmB;AAC9C,YAAQA,KAAR;AACE,WAAK,CAAL;AACE,eAAO,CAAP;;AACF,WAAK,CAAL;AACE,eAAO,IAAP;;AACF,WAAK,CAAL;AACE,eAAO,GAAP;;AACF,WAAK,CAAL;AACE,eAAO,IAAP;;AACF,WAAK,CAAL;AACE,eAAO,CAAP;;AACF;AACE,eAAO,CAAP;AAZJ;AAcD,GAfD;;AAiBA,QAAMC,iBAAiB,GAAID,KAAD,IAAmB;AAC3C,YAAQA,KAAR;AACE,WAAK,CAAL;AACE,eAAO,SAAP;;AACF,WAAK,CAAL;AACE,eAAO,SAAP;;AACF,WAAK,CAAL;AACE,eAAO,SAAP;;AACF,WAAK,CAAL;AACE,eAAO,SAAP;;AACF,WAAK,CAAL;AACE,eAAO,SAAP;;AACF;AACE,eAAO,SAAP;AAZJ;AAcD,GAfD;;AAiBA,QAAME,cAAc,GAAIF,KAAD,IAAmB;AACxC,YAAQA,KAAR;AACE,WAAK,CAAL;AACE,eAAO,MAAP;;AACF,WAAK,CAAL;AACE,eAAO,MAAP;;AACF,WAAK,CAAL;AACE,eAAO,MAAP;;AACF,WAAK,CAAL;AACE,eAAO,MAAP;;AACF,WAAK,CAAL;AACE,eAAO,QAAP;;AACF;AACE,eAAO,MAAP;AAZJ;AAcD,GAfD;;AAiBAvB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,eAAe,CAACV,MAAM,CAACE,QAAD,CAAN,CAAiBmB,KAAlB,CAAf;AACAb,IAAAA,SAAS,CAACS,oBAAoB,CAACR,YAAD,CAArB,CAAT;AACAK,IAAAA,QAAQ,CAACM,cAAc,CAACX,YAAD,CAAf,CAAR;AACAG,IAAAA,QAAQ,CAACO,iBAAiB,CAACV,YAAD,CAAlB,CAAR;AACAO,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AAEA,WAAO,MAAM;AACXC,MAAAA,aAAa,CAAC,CAAD,CAAb;AACD,KAFD,CAPc,CAUd;AACD,GAXQ,EAWN,CAACd,QAAD,CAXM,CAAT;AAaA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEoB,MAAAA,SAAS,EAAE;AAAb;AAAb,KACGb,YAAY,GAAG,CAAf,IAAoBM,UAAU,GAAG,CAAjC,gBACC,uDACE,oBAAC,WAAD;AACE,IAAA,QAAQ,EAAER,MADZ;AAEE,IAAA,KAAK,EAAE,IAFT;AAGE,IAAA,MAAM,EAAEH,MAHV;AAIE,IAAA,KAAK,EAAEO,KAJT;AAKE,IAAA,aAAa,EAAEL,aALjB;AAME,IAAA,WAAW,EAAC,aANd;AAOE,IAAA,YAAY,EAAEH;AAPhB,IADF,EAUGE,gBAAgB,iBAAI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEM,MAAAA;AAAF;AAAb,KAAyBE,KAAzB,CAVvB,CADD,gBAcC,oBAAC,IAAD,OAfJ,CADF;AAoBD,CAjGD;;AAmGA,eAAeZ,wBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text } from 'react-native';\nimport ProgressBar from 'react-native-progress/Bar';\nimport zxcvbn from 'zxcvbn';\n\ninterface Props {\n  password: string;\n  radius?: number;\n  height?: number;\n  showStrenghtText?: boolean;\n  unfilledColor?: string;\n}\n\nconst PasswordStrengthMeterBar: React.FC<Props> = ({\n  password,\n  radius = 4,\n  height = 8,\n  showStrenghtText = true,\n  unfilledColor = '#F0F0F0',\n}) => {\n  const [result, setResult] = useState<number>(0);\n  const [testedResult, setTestedResult] = useState<number>(0);\n  const [color, setColor] = useState<string>('#F25F5C');\n  const [label, setLabel] = useState<string>('');\n  const [firstMount, setFirstMount] = useState<number>(0);\n\n  const calculaterPercentage = (value: number) => {\n    switch (value) {\n      case 0:\n        return 0;\n      case 1:\n        return 0.25;\n      case 2:\n        return 0.5;\n      case 3:\n        return 0.75;\n      case 4:\n        return 1;\n      default:\n        return 0;\n    }\n  };\n\n  const calculateBarColor = (value: number) => {\n    switch (value) {\n      case 0:\n        return '#F25F5C';\n      case 1:\n        return '#F25F5C';\n      case 2:\n        return '#FFE066';\n      case 3:\n        return '#247BA0';\n      case 4:\n        return '#70C1B3';\n      default:\n        return '#F25F5C';\n    }\n  };\n\n  const calculateLabel = (value: number) => {\n    switch (value) {\n      case 0:\n        return 'Weak';\n      case 1:\n        return 'Weak';\n      case 2:\n        return 'Fair';\n      case 3:\n        return 'Good';\n      case 4:\n        return 'Strong';\n      default:\n        return 'Weak';\n    }\n  };\n\n  useEffect(() => {\n    setTestedResult(zxcvbn(password).score);\n    setResult(calculaterPercentage(testedResult));\n    setLabel(calculateLabel(testedResult));\n    setColor(calculateBarColor(testedResult));\n    setFirstMount(firstMount + 1);\n\n    return () => {\n      setFirstMount(0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [password]);\n\n  return (\n    <View style={{ marginTop: 5 }}>\n      {testedResult > 0 || firstMount > 1 ? (\n        <>\n          <ProgressBar\n            progress={result}\n            width={null}\n            height={height}\n            color={color}\n            unfilledColor={unfilledColor}\n            borderColor=\"transparent\"\n            borderRadius={radius}\n          />\n          {showStrenghtText && <Text style={{ color }}>{label}</Text>}\n        </>\n      ) : (\n        <View />\n      )}\n    </View>\n  );\n};\n\nexport default PasswordStrengthMeterBar;\n"]}